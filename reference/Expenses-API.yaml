openapi: 3.1.0
info:
  title: Expenses API
  version: '1.0'
  license:
    name: MIT
    identifier: MIT
  description: REST API of the expenses App. It allows to create users and register expenses for them.
  contact:
    name: Ariel Alvarado
servers:
  - url: 'http://localhost:3000'
paths:
  /:
    get:
      summary: Status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Success:
                  value:
                    message: The application is running
      operationId: get
      description: Endpoint to check if the API is up.
      tags:
        - Status
      security: []
  /users:
    post:
      summary: Create a User
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Success:
                  value:
                    message: An email was sent with a link to activate your user. The link is valid for six hours
          headers: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDataResponse'
      operationId: post-users
      description: 'Creates a new user in the application. If the user is already created but not active yet, it will send an activation email to the user.'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  fullName: John Doe
                  age: 30
                  email: john@email.com
                  password: anAwesomePasswordTomato
              properties:
                fullName:
                  type: string
                  maxLength: 300
                  example: John Doe
                age:
                  type: number
                  minimum: 0
                  maximum: 200
                  example: 25
                email:
                  type: string
                  example: john@email.com
                  minLength: 3
                  maxLength: 254
                password:
                  type: string
                  minLength: 5
                  example: aSuperSecurePassword
                  maxLength: 60
              required:
                - email
                - password
      tags:
        - Users
      security: []
  '/users/{userId}':
    get:
      summary: Get a User
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDataResponse'
      operationId: 'get-users-:userId'
      description: Get the basic user information
      security:
        - UserBearerAuthorization: []
    put:
      summary: Update a User
      operationId: 'put-users-:userId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Success:
                  value:
                    message: User updated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDataResponse'
      description: Modify basic user data
      security:
        - UserBearerAuthorization: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                fullName:
                  type: string
                  minLength: 1
                age:
                  type: number
              required:
                - fullName
                - age
              x-examples:
                example-1:
                  fullName: John Seamus Doe
                  age: 30
            examples:
              Success:
                value:
                  fullName: John Seamus Doe
                  age: 30
      tags:
        - Users
    delete:
      summary: Delete a User
      operationId: 'delete-users-:userId'
      responses:
        '200':
          description: OK
      description: Delete a user from the application
      tags:
        - Users
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: User identifier
  /users/status:
    parameters: []
    put:
      summary: Activate a user
      operationId: put-users-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Success:
                  value:
                    message: User activated successfully
      parameters:
        - schema:
            type: string
          in: query
          name: token
          description: Activation token
          required: true
      tags:
        - Users
      description: Activate a new user. A user only can login after the account is activated.
      security: []
  /users/activation:
    parameters: []
    post:
      summary: Send activation email to User
      operationId: post-users-activation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  email:
                    type: string
                    minLength: 1
                required:
                  - email
                x-examples:
                  example-1:
                    email: ariel_dna@outlook.com
              examples:
                Success:
                  value:
                    email: ariel_dna@outlook.com
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDataResponse'
      description: Send an activation email to a new user. Only activated users can use the application.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  email: ariel_dna@outlook.com
              properties:
                email:
                  type: string
                  minLength: 1
                  format: email
                  example: john@email.com
              required:
                - email
            examples: {}
        description: ''
      tags:
        - Users
      security: []
  /login:
    post:
      summary: Login
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
      tags:
        - Login/Logout
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  email: johnDoe
                  password: anAmazingPassword
              properties:
                email:
                  type: string
                  format: email
                  minLength: 3
                  maxLength: 254
                password:
                  type: string
                  minLength: 5
                  maxLength: 60
              required:
                - email
                - password
            examples: {}
      description: Login to the application. This endpoint will return the tokens required to consume all secured endpoints.
      security: []
  /login/refresh:
    post:
      summary: Refresh Tokens
      operationId: post-refresh
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
      tags:
        - Login/Logout
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  email: johnDoe
                  password: anAmazingPassword
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
            examples: {}
      description: 'Refresh the authorization tokens. Only one refresh token per time is valid, if you request a new one the older one will not be valid. This endpoint required a Bearer token, but the backend will not validate the expiration claim.'
      security:
        - UserBearerAuthorization: []
    parameters: []
  /logout:
    post:
      summary: Logout
      operationId: post-logout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Success:
                  value:
                    message: Logout completed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
      tags:
        - Login/Logout
      description: Logout from the application. The token and refresh token associated will not be valid after calling this route.
      security:
        - UserBearerAuthorization: []
    parameters: []
  /things:
    get:
      summary: Get all things
      tags:
        - Things
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicPagination'
                  - type: object
                    properties:
                      records:
                        type: array
                        items:
                          $ref: '#/components/schemas/Thing'
                    required:
                      - records
              examples:
                Success:
                  value:
                    limit: 100
                    offset: 0
                    total: 300
                    records:
                      - name: Food
                        description: All expenses related to food will be saved here
                        createdAt: '2019-08-24T14:15:22Z'
                        updatedAt: '2019-08-24T14:15:22Z'
                        id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                        userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
      operationId: get-things
      security:
        - UserBearerAuthorization: []
      description: |-
        Get all things associated with the user. To return records in descending order use "-". Example: "-UpdatedAt". 

        userId is required only with an ADMIN account.
      parameters:
        - schema:
            type: number
            example: 50
            maxLength: 4
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: Limit the number of records returned
        - schema:
            type: number
            minimum: 0
            example: 120
          in: query
          name: offset
          description: Number of records to be skipped
        - schema:
            type: string
            default: '-updatedAt'
            enum:
              - updatedAt
              - '-updatedAt'
          in: query
          name: order
          description: The results will be ordered by this field
        - schema:
            type: string
            example: e8a25b46-aa52-4909-871f-9cd1b5f2d931
          in: query
          name: userId
          description: It will return records associated to this user. This field is used only with an ADMIN user.
    post:
      summary: Create a Thing
      tags:
        - Things
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
              examples:
                Success:
                  value:
                    name: Food
                    description: All expenses related to food will be saved here
                    createdAt: '2019-08-24T14:15:22Z'
                    updatedAt: '2019-08-24T14:15:22Z'
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDataResponse'
      operationId: post-things
      security:
        - UserBearerAuthorization: []
      description: Create a new thing. Things are needed to create expenses later. A thing can be associated with multiple expenses.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicThing'
        description: ''
  /expenses:
    post:
      summary: Create Expense
      tags:
        - Expenses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
              examples:
                Success:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    amount: 150
                    thingId: 0cb8996d-0744-4578-b7a6-e1e938152e35
                    userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                    date: '2021-08-06'
                    createdAt: '2019-08-24T14:15:22Z'
                    updatedAt: '2019-08-24T14:15:22Z'
      operationId: post-expenses
      security:
        - UserBearerAuthorization: []
      description: Create a new expense.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicExpense'
            examples: {}
    get:
      summary: Get Expenses
      tags:
        - Expenses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicPagination'
                  - type: object
                    properties:
                      records:
                        type: array
                        items:
                          $ref: '#/components/schemas/Expense'
              examples:
                Success:
                  value:
                    limit: 100
                    offset: 0
                    total: 1
                    records:
                      - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                        amount: 150
                        thingId: 0cb8996d-0744-4578-b7a6-e1e938152e35
                        userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                        date: '2021-08-06'
                        createdAt: '2019-08-24T14:15:22Z'
                        updatedAt: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDataResponse'
      operationId: get-expenses
      description: List all expenses of the user (paginated)
      parameters:
        - schema:
            type: number
            example: 50
            maxLength: 4
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: Limit the number of records returned
        - schema:
            type: number
            minimum: 0
            example: 120
          in: query
          name: offset
          description: Number of records to be skipped
        - schema:
            type: string
            default: '-updatedAt'
            enum:
              - updatedAt
              - '-updatedAt'
          in: query
          name: order
          description: The results will be ordered by this field
      security:
        - UserBearerAuthorization: []
  '/expenses/{expenseId}':
    parameters:
      - schema:
          type: string
        name: expenseId
        in: path
        required: true
    get:
      summary: Get expense
      tags:
        - Expenses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
              examples:
                Success:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    amount: 150
                    thingId: 0cb8996d-0744-4578-b7a6-e1e938152e35
                    userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                    date: '2021-08-06'
                    createdAt: '2019-08-24T14:15:22Z'
                    updatedAt: '2019-08-24T14:15:22Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDataResponse'
      operationId: get-expenses-expenseId
      security:
        - UserBearerAuthorization: []
      description: Get an expense by id.
    put:
      summary: Update an expense
      tags:
        - Expenses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Success:
                  value:
                    message: Expense updated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDataResponse'
      operationId: put-expenses-expenseId
      security:
        - UserBearerAuthorization: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicExpense'
      description: Update an expense by id. The updatedAt field will be modified accordingly.
    delete:
      summary: Delete an expense
      tags:
        - Expenses
      responses:
        '204':
          description: No Content
      operationId: delete-expenses-expenseId
      security:
        - UserBearerAuthorization: []
      description: It will delete the expense by id. There is no way to undo this operation.
components:
  schemas:
    User:
      description: Basic User Information
      type: object
      x-examples:
        example-1:
          id: string
          fullName: string
          age: number
          email: string
      properties:
        id:
          type: string
          minLength: 1
          format: uuid
        fullName:
          type: string
          example: John Doe
          maxLength: 300
        age:
          type: number
          example: 25
          minimum: 0
          maximum: 200
        email:
          type: string
          format: email
          example: john@email.com
          maxLength: 254
          minLength: 3
      required:
        - id
        - fullName
        - age
        - email
      title: Basic User
    SuccessResponse:
      title: SuccessResponse
      type: object
      properties:
        message:
          type: string
      description: A successful response
    InvalidDataResponse:
      description: A validation error from the API
      type: object
      x-examples:
        example-1:
          error: Invalid data
          detail:
            - /email should NOT have fewer than 3 characters
      properties:
        error:
          type: string
          minLength: 1
          example: Invalid Data
        detail:
          type: array
          items:
            type: string
            example: /email should NOT have fewer than 3 characters
      required:
        - error
        - detail
      examples:
        - error: Invalid Data
          detail:
            - /email should NOT have fewer than 3 characters
      title: ''
    AuthToken:
      description: Authorization token returned after a correct login/refresh
      type: object
      x-examples:
        example-1:
          token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjhhZDUwMDgzLWM5MmUtNGUzOS1iODUxLTI2OWVmMDNjNGY4YiIsImlhdCI6MTYyODE5MDIzNiwiZXhwIjoxNjI4MTk3NDM2fQ.KCKd2VhdZbKY0tKihjjOs51qmfK5L2WiVk2ppuUayJQ
          refreshToken: lTLx9EOxXYma96A6Dbj4p
          user:
            email: ariel_dna@outlook.com
            id: 8ad50083-c92e-4e39-b851-269ef03c4f8b
            age: 30
            fullName: John Doee
      properties:
        token:
          type: string
          minLength: 1
          format: uuid
        refreshToken:
          type: string
          minLength: 1
        user:
          $ref: '#/components/schemas/User'
      required:
        - token
        - refreshToken
        - user
      examples:
        - token: b5507016-7da2-4777-a161-1e8042a6a377
          refreshToken: lTLx9EOxXYma96A6Dbj4p12dwdswqa
          user:
            id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
            fullName: John Doe
            age: 25
            email: john@email.com
    UnauthorizedResponse:
      description: Response to an unauthorized request
      type: object
      properties:
        error:
          type: string
          minLength: 1
      required:
        - error
      x-examples:
        example-1:
          error: Unauthorized
      examples:
        - error: Unauthorized
    BasicThing:
      description: Basic thing information.
      type: object
      x-examples:
        example-1:
          name: Food
          description: This will group all food
      examples:
        - name: Food
          description: All expenses related to food will be saved here
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          minLength: 3
          maxLength: 500
      required:
        - name
        - description
      title: BasicThing
    Thing:
      allOf:
        - $ref: '#/components/schemas/BasicThing'
        - $ref: '#/components/schemas/CreatedUpdatedDates'
        - properties:
            id:
              type: string
              format: uuid
            userId:
              type: string
              format: uuid
          type: object
          required:
            - id
            - userId
      description: A thing
    CreatedUpdatedDates:
      description: ''
      type: object
      x-examples:
        example-1:
          createdAt: '2021-08-05T15:46:43-04:00'
          updatedAt: '2021-08-05T15:46:43-04:00'
      examples: []
      properties:
        createdAt:
          type: string
          minLength: 1
          format: date-time
        updatedAt:
          type: string
          minLength: 1
          format: date-time
      required:
        - createdAt
        - updatedAt
    BasicPagination:
      description: ''
      type: object
      x-examples:
        example-1:
          limit: 100
          offset: 0
          order: 'field1,field2'
      examples:
        - limit: 100
          offset: 0
          total: 300
      properties:
        limit:
          type: integer
          minimum: 1
        offset:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
      required:
        - limit
        - offset
        - total
    BasicExpense:
      description: Basic expense model
      type: object
      x-examples:
        example-1:
          amount: 150
          thingId: 0cb8996d-0744-4578-b7a6-e1e938152e35
          date: '2021-08-06'
      properties:
        amount:
          type: number
          minimum: 0
          multipleOf: 0.01
        thingId:
          type: string
          minLength: 1
        date:
          type: string
          minLength: 1
      required:
        - amount
        - thingId
        - date
      examples:
        - amount: 150
          thingId: 0cb8996d-0744-4578-b7a6-e1e938152e35
          date: '2021-08-06'
    Expense:
      description: Expense Model
      x-examples:
        example-1:
          id: 399f5eea-ad4d-47d9-8a57-418d2f70b932
          amount: 150
          thingId: 0cb8996d-0744-4578-b7a6-e1e938152e35
          userId: 8ad50083-c92e-4e39-b851-269ef03c4f8b
          date: '2021-08-06'
          createdAt: '2021-08-06T11:23:47-04:00'
          updatedAt: '2021-08-06T11:23:47-04:00'
      allOf:
        - type: object
          properties:
            id:
              type: string
              minLength: 1
              format: uuid
            userId:
              type: string
              minLength: 1
              format: uuid
            createdAt:
              type: string
              minLength: 1
              format: date-time
            updatedAt:
              type: string
              minLength: 1
              format: date-time
          required:
            - id
            - userId
            - createdAt
            - updatedAt
        - $ref: '#/components/schemas/BasicExpense'
      examples:
        - id: 399f5eea-ad4d-47d9-8a57-418d2f70b932
          amount: 150
          thingId: 0cb8996d-0744-4578-b7a6-e1e938152e35
          userId: 8ad50083-c92e-4e39-b851-269ef03c4f8b
          date: '2021-08-06'
          createdAt: '2021-08-06T11:23:47-04:00'
          updatedAt: '2021-08-06T11:23:47-04:00'
  securitySchemes:
    UserBearerAuthorization:
      name: Authorization
      type: apiKey
      in: header
    AdminBearerAuthorization:
      name: Authorization
      type: apiKey
      in: header
  responses: {}
tags:
  - name: Users
  - name: Things
  - name: Login/Logout
  - name: Status
  - name: Expenses
security:
  - test-api-key: []
  - Admin Bearer Authorization: []
