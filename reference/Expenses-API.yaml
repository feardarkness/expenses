openapi: 3.1.0
info:
  title: Expenses API
  version: '1.0'
  summary: REST API of the expenses App. It allows to create users and register expenses for them.
  license:
    name: MIT
    identifier: MIT
servers:
  - url: 'http://localhost:3000'
paths:
  /:
    get:
      summary: Status
      tags:
        - status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Success:
                  value:
                    message: The application is running
      operationId: get
      description: Endpoint to check if the API is up.
  /users:
    post:
      summary: Create a User
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Success:
                  value:
                    message: An email was sent with a link to activate your user. The link is valid for six hours
          headers: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
      operationId: post-users
      description: 'Creates a new user in the application. If the user is already created but not active yet, it will send an activation email to the user.'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  fullName: John Doe
                  age: 30
                  email: john@email.com
                  password: anAwesomePasswordTomato
              properties:
                fullName:
                  type: string
                  maxLength: 300
                  example: John Doe
                age:
                  type: number
                  minimum: 0
                  maximum: 200
                  example: 25
                email:
                  type: string
                  example: john@email.com
                  minLength: 3
                  maxLength: 254
                password:
                  type: string
                  minLength: 5
                  example: aSuperSecurePassword
                  maxLength: 60
              required:
                - email
                - password
      tags:
        - Users
  '/users/:userId':
    get:
      summary: Get a User
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
      operationId: 'get-users-:userId'
      description: Get the basic user information
      security:
        - Bearer Authorization: []
    put:
      summary: Update a User
      operationId: 'put-users-:userId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Success:
                  value:
                    message: User updated successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
      description: Modify basic user data
      security:
        - Bearer Authorization: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                fullName:
                  type: string
                  minLength: 1
                age:
                  type: number
              required:
                - fullName
                - age
              x-examples:
                example-1:
                  fullName: John Seamus Doe
                  age: 30
            examples:
              Success:
                value:
                  fullName: John Seamus Doe
                  age: 30
    delete:
      summary: Delete a User
      operationId: 'delete-users-:userId'
      responses:
        '200':
          description: OK
      description: ''
  /users/status:
    parameters: []
    put:
      summary: Activate a user
      operationId: put-users-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Success:
                  value:
                    message: User activated successfully
      parameters:
        - schema:
            type: string
          in: query
          name: token
          description: Activation token
          required: true
      tags:
        - Users
  /users/activation:
    parameters: []
    post:
      summary: Activate User
      operationId: post-users-activation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  email:
                    type: string
                    minLength: 1
                required:
                  - email
                x-examples:
                  example-1:
                    email: ariel_dna@outlook.com
              examples:
                Success:
                  value:
                    email: ariel_dna@outlook.com
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
      description: Send an activation email to a new user. Only activated users can use the application.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  email: ariel_dna@outlook.com
              properties:
                email:
                  type: string
                  minLength: 1
                  format: email
                  example: john@email.com
              required:
                - email
            examples: {}
        description: ''
components:
  schemas:
    User:
      description: Basic User Information
      type: object
      x-examples:
        example-1:
          id: string
          fullName: string
          age: number
          email: string
      properties:
        id:
          type: string
          minLength: 1
          format: uuid
        fullName:
          type: string
          example: John Doe
          maxLength: 300
        age:
          type: number
          example: 25
          minimum: 0
          maximum: 200
        email:
          type: string
          format: email
          example: john@email.com
          maxLength: 254
          minLength: 3
      required:
        - id
        - fullName
        - age
        - email
      title: Basic User
    SuccessResponse:
      title: SuccessResponse
      type: object
      properties:
        message:
          type: string
    InvalidData:
      description: ''
      type: object
      x-examples:
        example-1:
          error: Invalid data
          detail:
            - /email should NOT have fewer than 3 characters
      properties:
        error:
          type: string
          minLength: 1
          example: Invalid Data
        detail:
          type: array
          items:
            type: string
            example: /email should NOT have fewer than 3 characters
      required:
        - error
        - detail
      examples:
        - error: Invalid Data
          detail:
            - /email should NOT have fewer than 3 characters
  securitySchemes:
    Bearer Authorization:
      name: Authorization
      type: apiKey
      in: header
security:
  - test-api-key: []
